import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute, NavigationRoute } from "workbox-routing";
import {
  StaleWhileRevalidate,
  CacheFirst,
  NetworkFirst,
} from "workbox-strategies";
import { CacheableResponsePlugin } from "workbox-cacheable-response";
import { ExpirationPlugin } from "workbox-expiration";

// Precache all static assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST || []);

// Enable navigation routing for offline support
const handler = createHandlerBoundToURL("/offline.html");
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.origin === "https://fonts.googleapis.com",
  new StaleWhileRevalidate({
    cacheName: "google-fonts-stylesheets",
  })
);

// Cache the Google Fonts webfont files with a cache-first strategy for 1 year
registerRoute(
  ({ url }) => url.origin === "https://fonts.gstatic.com",
  new CacheFirst({
    cacheName: "google-fonts-webfonts",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === "image",
  new CacheFirst({
    cacheName: "images",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache JS and CSS files with a stale-while-revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === "script" || request.destination === "style",
  new StaleWhileRevalidate({
    cacheName: "static-resources",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Cache API requests with a network-first strategy
registerRoute(
  ({ url }) => url.origin === "https://story-api.dicoding.dev",
  new NetworkFirst({
    cacheName: "api-requests",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60, // 1 hour
      }),
    ],
  })
);

// Handle push notifications
self.addEventListener("push", (event) => {
  console.log("[Service Worker] Push Received:", event);

  let notificationData = {};

  try {
    if (event.data) {
      const dataText = event.data.text();
      console.log("[Service Worker] Push data text:", dataText);

      try {
        notificationData = JSON.parse(dataText);
        console.log(
          "[Service Worker] Push data parsed as JSON:",
          notificationData
        );
      } catch (jsonError) {
        console.warn(
          "[Service Worker] Push data is not valid JSON. Falling back to plain text. Error:",
          jsonError.message
        );
        notificationData = {
          title: "Notification",
          options: {
            body: dataText,
          },
        };
      }
    } else {
      notificationData = {
        title: "New Story",
        options: {
          body: "Someone has posted a new story",
        },
      };
    }
  } catch (error) {
    console.error("[Service Worker] Error processing push data:", error);
    notificationData = {
      title: "Notification Error",
      options: {
        body: "Could not process incoming notification.",
      },
    };
  }

  const notificationTitle = notificationData.title || "New Story";
  const notificationOptions = {
    body:
      notificationData.options && notificationData.options.body
        ? notificationData.options.body
        : "Default notification body.",
    icon: "/icons/icon-192x192.png",
    badge: "/icons/badge-72x72.png",
    data: notificationData.data || { url: "/" },
    requireInteraction: true,
    actions: [
      {
        action: "view",
        title: "View",
      },
      {
        action: "close",
        title: "Close",
      },
    ],
  };

  event.waitUntil(
    self.registration.showNotification(notificationTitle, notificationOptions)
  );
});

// Handle notification click
self.addEventListener("notificationclick", (event) => {
  console.log("[Service Worker] Notification click received", event);
  event.notification.close();

  let urlToOpen = "/";

  if (
    event.action === "view" &&
    event.notification.data &&
    event.notification.data.url
  ) {
    urlToOpen = event.notification.data.url;
  } else if (event.notification.data && event.notification.data.url) {
    urlToOpen = event.notification.data.url;
  }

  event.waitUntil(
    clients
      .matchAll({
        type: "window",
        includeUncontrolled: true,
      })
      .then((windowClients) => {
        // Check if there is already a window open
        const matchingClient = windowClients.find(
          (client) => client.url === urlToOpen
        );

        if (matchingClient) {
          return matchingClient.focus();
        }

        return clients.openWindow(urlToOpen);
      })
  );
});
